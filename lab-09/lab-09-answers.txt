Name: ZHENG Weijia William
IE account: zw019
VM account: u133
SID: 1155124322
Date: Nov. 30th, 2019
My MacbookAir has Linux operation system, so I did lab-09 on my own computer.


Q1(a)
I followed the example, everything is going well. beneth is the result:
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./countalpha countalpha.c
Processing countalpha.c ...1416 bytes processed successfully.
Letter  Counts    Percentage
A        38        4.79% 
B        18        2.27% 
C        31        3.90% 
D        16        2.02% 
E        89        11.21% 
F        53        6.68% 
G        14        1.76% 
H        19        2.39% 
I        70        8.82% 
J        9        1.13% 
K        9        1.13% 
L        44        5.54% 
M        6        0.76% 
N        72        9.07% 
O        35        4.41% 
P        18        2.27% 
Q        0        0.00% 
R        62        7.81% 
S        50        6.30% 
T        87        10.96% 
U        39        4.91% 
V        6        0.76% 
W        2        0.25% 
X        0        0.00% 
Y        3        0.38% 
Z        4        0.50%


Q1(b)
Instead of overwriting on the original file(I just do not like that), I created a new file called countalpha2.c. And The result is as following, I use the same numbers in the .pdf manual, i.e. 2,3 and 4.
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./countalpha2 lab-04-*.c
Processing lab-04-2.c ...204 bytes processed successfully.
Processing lab-04-3.c ...311 bytes processed successfully.
Processing lab-04-6.c ...390 bytes processed successfully.
Letter  Counts    Percentage
A        23        4.89% 
B        5        1.06% 
C        15        3.19% 
D        15        3.19% 
E        30        6.38% 
F        18        3.83% 
G        1        0.21% 
H        11        2.34% 
I        67        14.26% 
J        18        3.83% 
K        0        0.00% 
L        17        3.62% 
M        8        1.70% 
N        53        11.28% 
O        15        3.19% 
P        6        1.28% 
Q        0        0.00% 
R        37        7.87% 
S        31        6.60% 
T        75        15.96% 
U        17        3.62% 
V        2        0.43% 
W        2        0.43% 
X        0        0.00% 
Y        1        0.21% 
Z        3        0.64% 


Q1(c)
I use the code in Q1(a), and the result is following:
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./countalpha alicewonderland.txt
Processing alicewonderland.txt ...169226 bytes processed successfully.
Letter  Counts    Percentage
A        9771        7.97% 
B        1736        1.42% 
C        2985        2.44% 
D        5451        4.45% 
E        15334        12.51% 
F        2378        1.94% 
G        2929        2.39% 
H        7876        6.43% 
I        8607        7.02% 
J        231        0.19% 
K        1286        1.05% 
L        5190        4.24% 
M        2462        2.01% 
N        8019        6.54% 
O        9442        7.70% 
P        1962        1.60% 
Q        220        0.18% 
R        6577        5.37% 
S        7241        5.91% 
T        12161        9.92% 
U        3962        3.23% 
V        958        0.78% 
W        2939        2.40% 
X        176        0.14% 
Y        2577        2.10% 
Z        80        0.07% 

Therefore, the 5 most frequent letters are E, T, A, O, I. Using this property, one can break a substitution cipher, e.g. Caesar Cipher, by looking at the frequency of each letter, etc..





Q2(a)
1. The case that no argument is given:
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./copyfile
Usage: ./copyfile source destination [destination]

2. The case is that only the source file is given, also, cannot be executed normally:
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./copyfile copyfile
Usage: ./copyfile source destination [destination]

3. The case is that source, destination given but not buffersize, so the buffersize is 8192 as default:
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./copyfile copyfile copyfile2
Copying from copyfile to copyfile2 with buffer size 8192 bytes ... 12968 bytes copied successfully.

4. The case is that source, destination, and buffersize given:
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./copyfile copyfile copyfile2 30234
Copying from copyfile to copyfile2 with buffer size 30234 bytes ... 12968 bytes copied successfully.

Following is the diff utility: 2 files are different shown by the diff, and after overwrite by copyfile, they are identical. Applying this to copyfile and copyfile2, which are compiled files, and there are no notices. Thus we know they are identical.

zw019@zw019-MacBookAir:~/ierg2080/test_folder$ diff radd countalpha
Binary files radd and countalpha differ

zw019@zw019-MacBookAir:~/ierg2080/lab-09$ diff diff1.txt diff2.txt
2,4d1
< Do you 
< hear the 
< people sing?

zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./copyfile diff1.txt diff2.txt 3213
Copying from diff1.txt to diff2.txt with buffer size 3213 bytes ... 50 bytes copied successfully.
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ diff diff1.txt diff2.txt
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ diff copyfile copyfile2 


Q2(b)
I created a new file, copyfileb.c to implement (b) part.

zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./copyfileb copyfileb copyfileb2 65536
Copying from copyfileb to copyfileb2 with buffer size 65536 bytes ... 13008 bytes copied successfully in 0.000251s.
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./copyfileb copyfileb copyfileb2 8192
Copying from copyfileb to copyfileb2 with buffer size 8192 bytes ... 13008 bytes copied successfully in 0.000346s.
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./copyfileb copyfileb copyfileb2 1024
Copying from copyfileb to copyfileb2 with buffer size 1024 bytes ... 13008 bytes copied successfully in 0.000368s.
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./copyfileb copyfileb copyfileb2 1
Copying from copyfileb to copyfileb2 with buffer size 1 bytes ... 13008 bytes copied successfully in 0.001585s.

According to the results above, I conclude that the execution time and buffersize is negative-related.


Q2(c)
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ls -l copyfileb*
-rwxr-xr-x 1 zw019 zw019 13008 十一 30 15:38 copyfileb
-rw-r--r-- 1 zw019 zw019 13008 十一 30 15:44 copyfileb2
-rw-rw-r-- 1 zw019 zw019  1855 十一 30 15:38 copyfileb.c
Yes, only copyfileb, i.e. the compiled file (aka. not the copy) has "-x"

I created a new file copyfilec.c(and also other corresponding ones) to implement:
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ls -l copyfilec*
-rwxr-xr-x 1 zw019 zw019 13008 十一 30 15:49 copyfilec
-rw-r--r-- 1 zw019 zw019 13008 十一 30 15:49 copyfilec2
-rw-rw-r-- 1 zw019 zw019  1855 十一 30 15:38 copyfilec.c
Surely, at first the file cannot be executed. If we try to execute it, the terminal shows:
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./copyfilec2 copyfilec copyfilec3 65536
bash: ./copyfilec2: Permission denied

And we run this cmd:
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ chmod 755 copyfilec2
Then, run the copyfilec2 file:
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./copyfilec2 copyfilec copyfilec3 65536
Copying from copyfilec to copyfilec3 with buffer size 65536 bytes ... 13008 bytes copied successfully in 0.000162s.
The copy process can be done.




Q3(a)
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./maxmalloc
Allocating heap memory block of size 8589934592 ... failed!
Maximum heap allocation is 4294967296 bytes


Q3(b)
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./maxmalloc
Allocating heap memory block of size 8589934592 ... failed!
addr=0x7fffb1ad6960
buffsizeV=1024, 2-th round.
addr=0x7fffb1ad6560
buffsizeV=2048, 3-th round.
addr=0x7fffb1ad5d60
buffsizeV=4096, 4-th round.
addr=0x7fffb1ad4d60
buffsizeV=8192, 5-th round.
addr=0x7fffb1ad2d60
buffsizeV=16384, 6-th round.
addr=0x7fffb1aced60
buffsizeV=32768, 7-th round.
addr=0x7fffb1ac6d60
buffsizeV=65536, 8-th round.
addr=0x7fffb1ab6d60
buffsizeV=131072, 9-th round.
addr=0x7fffb1a96d60
buffsizeV=262144, 10-th round.
addr=0x7fffb1a56d60
buffsizeV=524288, 11-th round.
addr=0x7fffb19d6d60
buffsizeV=1048576, 12-th round.
addr=0x7fffb18d6d60
buffsizeV=2097152, 13-th round.
addr=0x7fffb16d6d60
buffsizeV=4194304, 14-th round.
Segmentation fault (core dumped)

When VLA allocation fails, it results to segmentation fault.


Q3(c)
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./maxmalloc
Allocating heap memory block of size 8589934592 ... failed!
Maximum heap allocation is 4294967296 bytes
VLA: Num_iter is 1, current buffsize is=1024
Largest size is 1024
VLA: Num_iter is 2, current buffsize is=2048
Largest size is 3072
VLA: Num_iter is 3, current buffsize is=4096
Largest size is 7168
VLA: Num_iter is 4, current buffsize is=8192
Largest size is 15360
VLA: Num_iter is 5, current buffsize is=16384
Largest size is 31744
VLA: Num_iter is 6, current buffsize is=32768
Largest size is 64512
VLA: Num_iter is 7, current buffsize is=65536
Largest size is 130048
VLA: Num_iter is 8, current buffsize is=131072
Largest size is 261120
VLA: Num_iter is 9, current buffsize is=262144
Largest size is 523264
VLA: Num_iter is 10, current buffsize is=524288
Largest size is 1047552
VLA: Num_iter is 11, current buffsize is=1048576
Largest size is 2096128
VLA: Num_iter is 12, current buffsize is=2097152
Largest size is 4193280
VLA: Num_iter is 13, current buffsize is=4194304
Largest size is 8387584
Segmentation fault (core dumped)

I found the largest value of the VLA length may vary every time. But it's around about 8350000 such big. 

The 2 disadvantages are: 1) Shown by this problem, the size is smaller, and when the number exceeds the limit, DMA will not crash the programme but VLA will. 2) DMA can call "free" function, which can then make use of the assigned, but won't be used any longer slots, and this can make one's code more efficient.




Q4 (Bonus)
The code is in snake.c. Hope you enjoy the mini-game~ 
But since I used Macbook when I press F1 the game won't quit. Anyway, I preserve the code (ch != KEY_F(1)) one can press control+C to do so. And other things are going well.

zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./snake
The Score Is: 4 !
zw019@zw019-MacBookAir:~/ierg2080/lab-09$ ./snake
The Score Is: 7 !


Thank you all very much for giving we students lectures and helping us during tutorials! I love IERG2080!❤️


Best regards,
ZHENG Weijia
Dec. 8th, 2019
